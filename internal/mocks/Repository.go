// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	dto_passanger "fww-core/internal/data/dto_passanger"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindDetailPassanger provides a mock function with given fields: id
func (_m *Repository) FindDetailPassanger(id int64) (dto_passanger.ResponseDetail, error) {
	ret := _m.Called(id)

	var r0 dto_passanger.ResponseDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (dto_passanger.ResponseDetail, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) dto_passanger.ResponseDetail); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto_passanger.ResponseDetail)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPassanger provides a mock function with given fields: data
func (_m *Repository) RegisterPassanger(data *dto_passanger.RequestRegister) (int64, error) {
	ret := _m.Called(data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestRegister) (int64, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestRegister) int64); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*dto_passanger.RequestRegister) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassanger provides a mock function with given fields: data
func (_m *Repository) UpdatePassanger(data *dto_passanger.RequestUpdate) (dto_passanger.ResponseUpdate, error) {
	ret := _m.Called(data)

	var r0 dto_passanger.ResponseUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestUpdate) (dto_passanger.ResponseUpdate, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestUpdate) dto_passanger.ResponseUpdate); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(dto_passanger.ResponseUpdate)
	}

	if rf, ok := ret.Get(1).(func(*dto_passanger.RequestUpdate) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
