// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	message "github.com/ThreeDotsLabs/watermill/message"

	mock "github.com/stretchr/testify/mock"
)

// MessageStream is an autogenerated mock type for the MessageStream type
type MessageStream struct {
	mock.Mock
}

// NewPublisher provides a mock function with given fields:
func (_m *MessageStream) NewPublisher() (message.Publisher, error) {
	ret := _m.Called()

	var r0 message.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func() (message.Publisher, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() message.Publisher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(message.Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriber provides a mock function with given fields:
func (_m *MessageStream) NewSubscriber() (message.Subscriber, error) {
	ret := _m.Called()

	var r0 message.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func() (message.Subscriber, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() message.Subscriber); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(message.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageStream creates a new instance of MessageStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageStream(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageStream {
	mock := &MessageStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
