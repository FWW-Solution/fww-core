// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	dto_passanger "fww-core/internal/data/dto_passanger"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// DetailPassanger provides a mock function with given fields: id
func (_m *UseCase) DetailPassanger(id int64) (dto_passanger.ResponseDetail, error) {
	ret := _m.Called(id)

	var r0 dto_passanger.ResponseDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (dto_passanger.ResponseDetail, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) dto_passanger.ResponseDetail); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto_passanger.ResponseDetail)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPassanger provides a mock function with given fields: data
func (_m *UseCase) RegisterPassanger(data *dto_passanger.RequestRegister) (dto_passanger.ResponseRegistered, error) {
	ret := _m.Called(data)

	var r0 dto_passanger.ResponseRegistered
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestRegister) (dto_passanger.ResponseRegistered, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestRegister) dto_passanger.ResponseRegistered); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(dto_passanger.ResponseRegistered)
	}

	if rf, ok := ret.Get(1).(func(*dto_passanger.RequestRegister) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassanger provides a mock function with given fields: data
func (_m *UseCase) UpdatePassanger(data *dto_passanger.RequestUpdate) (dto_passanger.ResponseUpdate, error) {
	ret := _m.Called(data)

	var r0 dto_passanger.ResponseUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestUpdate) (dto_passanger.ResponseUpdate, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*dto_passanger.RequestUpdate) dto_passanger.ResponseUpdate); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(dto_passanger.ResponseUpdate)
	}

	if rf, ok := ret.Get(1).(func(*dto_passanger.RequestUpdate) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
